<hr>

# User Manual for myshell

## Introduction

Welcome to myshell, a simple command-line shell designed for UNIX platforms. This manual provides a comprehensive guide on how to use myshell, covering essential features and concepts. Ensure that you read through this manual to effectively navigate and utilize myshell.

### Overview

myshell is a command-line interface that provides a set of commands for interacting with the operating system. It supports both interactive mode, where you enter commands directly, and batch mode, where commands are read from a file.

### Running myshell

To run myshell, open a terminal and navigate to the directory containing the myshell executable. You can run myshell in interactive mode without any arguments:

```bash path/to/myshell```

For batch mode, provide a batch file as an argument:

```bash path/to/myshell path/to/batchfile```

### Internal Commands

myshell supports the following internal commands:

- **cd [directory]:** Change the current working directory.
- **clr:** Clear the screen.
- **dir [directory]:** List the contents of a directory.
- **environ:** Display the current environment variables.
- **echo [message]:** Print a message to the screen.
- **help:** Display the user manual.
- **pause:** Pause the shell until the Enter key is pressed.
- **quit/exit:** Exit the shell.

### External Commands

For external commands, myshell can execute any command available in the system. Simply type the command, and myshell will execute it.

### Batch Mode

In batch mode, myshell reads commands from a specified file. Provide the batch file as a command-line argument when launching myshell.

```bash path/to/myshell <batchfile>```

### Environmental Variables

myshell allows you to display environmental variables, via the command `environ`.

### General Shell Features
Please note that myshell does not currently incorporate these features, as per the requirements of the lab.

#### Input/Output Redirection

You can redirect the input or output of a command using the following symbols:

    > : Redirects the output of a command to a file, overwriting the file if it already exists.
    >> : Redirects the output of a command to a file, appending the output to the end of the file if it already exists.
    < : Redirects the input of a command from a file.

Example: `ls > output.txt`

This command will list the contents of the current directory and write the output to a file named output.txt.

#### Background Program Execution

You can run commands in the background by appending an ampersand (&) to the end of the command. This allows you to continue using the shell while the command executes.

Example: `long_running_command &`

This will execute long_running_command in the background.

## Conclusion

This concludes the myshell user manual.

Happy scripting!

<hr>
